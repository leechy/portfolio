name: Deploy to DigitalOcean

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Build and Lint Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # svelte check is doing the linting now
      # - name: Run linter
      #   run: npm run lint

      - name: Run type check
        run: npm run check

      # - name: Run basic tests
      #   run: npx vitest run src/basic.test.ts src/demo.spec.ts

      - name: Build application
        run: npm run build

      - name: Validate build output
        run: |
          if [ ! -d "build" ]; then
            echo "‚ùå Build directory not found!"
            exit 1
          fi
          if [ ! -f "build/index.js" ]; then
            echo "‚ùå Build output missing!"
            exit 1  
          fi
          echo "‚úÖ Build validation passed!"

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Validate build for deployment
        run: |
          if [ ! -d "build" ]; then
            echo "‚ùå Build directory not found!"
            exit 1
          fi
          if [ ! -f "build/index.js" ]; then
            echo "‚ùå Build output missing!"
            exit 1  
          fi
          echo "‚úÖ Build ready for deployment!"

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          
      - name: Test SSH connection
        run: |
          echo "Testing SSH connection..."
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"

      - name: Backup database on server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
            set -e
            echo "ÔøΩ Backing up database..."
            cd /var/www/portfolio
            
            # Create backup of current database
            if [ -f "data/portfolio.db" ]; then
              cp data/portfolio.db data/portfolio-backup-$(date +%Y%m%d-%H%M%S).db
              # Keep only last 5 backups
              ls -t data/portfolio-backup-*.db 2>/dev/null | tail -n +6 | xargs -r rm
            fi
            
            # Ensure required directories exist
            mkdir -p data logs
          ENDSSH

      - name: Deploy built application to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          source: "build,package.json,ecosystem.config.js"
          target: "/home/${{ secrets.SERVER_USER }}/deploy"
          strip_components: 0
          overwrite: true

      - name: Setup permissions and move files
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
            set -e
            echo "üöÄ Finalizing deployment..."
            
            # Debug: Check what was deployed
            echo "üîç Checking deployed files..."
            if [ -d "/home/portfolio/deploy" ]; then
              echo "Contents of /home/portfolio/deploy:"
              ls -la /home/portfolio/deploy/
              echo "Files structure:"
              find /home/portfolio/deploy -type f | head -20
            else
              echo "‚ùå Deploy directory not found at /home/portfolio/deploy"
              exit 1
            fi
            
            # Ensure portfolio user owns the application directory
            if [ ! -w "/var/www/portfolio" ]; then
              echo "‚ö†Ô∏è /var/www/portfolio not writable by portfolio user"
              echo "Please run this on the server: sudo chown -R portfolio:portfolio /var/www/portfolio"
              exit 1
            fi
            
            # Check if build directory exists in deployed files
            if [ ! -d "/home/portfolio/deploy/build" ]; then
              echo "‚ùå Build directory missing in deployment!"
              echo "Available directories:"
              ls -la /home/portfolio/deploy/
              exit 1
            fi
            
            # Move deployed files to application directory
            echo "üìÅ Moving files to application directory..."
            cp -r /home/portfolio/deploy/* /var/www/portfolio/
            
            # Navigate to app directory
            cd /var/www/portfolio
            
            # Verify files were copied correctly
            echo "üìã Verifying copied files..."
            if [ ! -f "package.json" ]; then
              echo "‚ùå package.json missing after copy"
              exit 1
            fi
            if [ ! -d "build" ]; then
              echo "‚ùå build directory missing after copy"
              exit 1
            fi
            echo "‚úÖ All required files present"
            
            # Install only production dependencies (much faster than full install)
            echo "üì¶ Installing production dependencies..."
            npm ci --production
            
            # Clean up deploy directory
            rm -rf /home/portfolio/deploy
            
            # Restart PM2 process
            echo "üîÑ Restarting application..."
            if pm2 describe portfolio-app > /dev/null 2>&1; then
              pm2 reload portfolio-app --wait-ready
            else
              pm2 start ecosystem.config.js --wait-ready
            fi
            
            # Save PM2 configuration
            pm2 save
            
            echo "‚úÖ Deployment completed successfully!"
          ENDSSH

      - name: Reload Nginx (requires sudo)
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'Reloading Nginx...'; sudo systemctl reload nginx || echo 'Nginx reload failed - may need manual intervention'"

      - name: Health Check
        run: |
          echo "üè• Running health check..."

          # Wait a moment for the application to start
          sleep 10

          # Check if the application is responding
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.DOMAIN_NAME }} || echo "000")

          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Health check passed: Application is responding (HTTP $HTTP_CODE)"
          else
            echo "‚ùå Health check failed: Application returned HTTP $HTTP_CODE"
            echo "üîç Checking application logs..."
            ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "pm2 logs portfolio-app --lines 20"
            exit 1
          fi

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "üéâ Deployment to production completed successfully!"
            echo "üåê Site URL: https://${{ secrets.DOMAIN_NAME }}"
          else
            echo "üí• Deployment failed! Check the logs above for details."
          fi
