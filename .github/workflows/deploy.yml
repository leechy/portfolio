name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run type check
      run: npm run check

    - name: Build application
      run: npm run build

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
          set -e
          
          echo "üöÄ Starting deployment..."
          
          # Navigate to application directory
          cd /var/www/portfolio
          
          # Create backup of current database
          if [ -f "data/portfolio.db" ]; then
            echo "üíæ Backing up database..."
            cp data/portfolio.db data/portfolio-backup-$(date +%Y%m%d-%H%M%S).db
            
            # Keep only last 5 backups
            ls -t data/portfolio-backup-*.db 2>/dev/null | tail -n +6 | xargs -r rm
          fi
          
          # Pull latest changes
          echo "üì• Pulling latest changes from main branch..."
          git fetch origin
          git reset --hard origin/main
          
          # Install dependencies
          echo "üì¶ Installing dependencies..."
          npm ci --production
          
          # Build the application
          echo "üî® Building application..."
          npm run build
          
          # Ensure data directory exists
          mkdir -p data
          
          # Start or reload PM2 process
          echo "üîÑ Restarting application..."
          if pm2 describe portfolio-app > /dev/null 2>&1; then
            pm2 reload portfolio-app
          else
            pm2 start ecosystem.config.js
          fi
          
          # Save PM2 configuration
          pm2 save
          
          # Reload Nginx
          echo "üåê Reloading Nginx..."
          sudo systemctl reload nginx
          
          echo "‚úÖ Deployment completed successfully!"
        ENDSSH

    - name: Health Check
      run: |
        echo "üè• Running health check..."
        
        # Wait a moment for the application to start
        sleep 10
        
        # Check if the application is responding
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.DOMAIN_NAME }} || echo "000")
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "‚úÖ Health check passed: Application is responding (HTTP $HTTP_CODE)"
        else
          echo "‚ùå Health check failed: Application returned HTTP $HTTP_CODE"
          echo "üîç Checking application logs..."
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "pm2 logs portfolio-app --lines 20"
          exit 1
        fi

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "üéâ Deployment to production completed successfully!"
          echo "üåê Site URL: https://${{ secrets.DOMAIN_NAME }}"
        else
          echo "üí• Deployment failed! Check the logs above for details."
        fi